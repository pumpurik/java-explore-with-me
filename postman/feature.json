{
  "info": {
    "_postman_id": "12498b91-7cbd-4f84-8b8d-c14258bce68c",
    "name": "feature rating events",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "28170376"
  },
  "item": [
    {
      "name": "лайк мероприятия",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id)\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        pm.collectionVariables.set(\"eid\", event.id)\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "var query = {};\r",
              "var query = {};\npm.request.url.query.all().forEach((param) => { query[param.key] = param.value });\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: user, event, actionType\", function () {\r",
              "pm.expect(target).to.have.property('user');\r",
              "pm.expect(target).to.have.property('event');\r",
              "pm.expect(target).to.have.property('actionType');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.user.toString()).equals(pm.variables.get('uid').toString());\r",
              "    pm.expect(target.event.toString()).equals(pm.variables.get('eid').toString());\r",
              "    pm.expect(target.actionType.toString()).equal('LIKE', 'активность должна быть дизлайком');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "like"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id текущего мероприятия"
            }
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- один и тот же пользователь не может лайкнуть один и тоже event"
      },
      "response": []
    },
    {
      "name": "дизлай мероприятия",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id)\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        pm.collectionVariables.set(\"eid\", event.id)\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "var query = {};\r",
              "var query = {};\npm.request.url.query.all().forEach((param) => { query[param.key] = param.value });\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: user, event, actionType\", function () {\r",
              "pm.expect(target).to.have.property('user');\r",
              "pm.expect(target).to.have.property('event');\r",
              "pm.expect(target).to.have.property('actionType');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.user.toString()).equals(pm.variables.get('uid').toString());\r",
              "    pm.expect(target.event.toString()).equals(pm.variables.get('eid').toString());\r",
              "    pm.expect(target.actionType.toString()).equal('DISLIKE', 'активность должна быть дизлайком');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "dislike"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id текущего мероприятия"
            }
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- один и тот же пользователь не может лайкнуть один и тоже event"
      },
      "response": []
    },
    {
      "name": "повторный лайк мероприятия",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id);\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        await api.addLike(user.id, event.id);\r",
              "        pm.collectionVariables.set(\"eid\", event.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409 и error в формате json\", function () {\r",
              "    pm.response.to.have.status(409);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "like"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id текущего мероприятия"
            }
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- один и тот же пользователь не может лайкнуть один и тоже event"
      },
      "response": []
    },
    {
      "name": "повторный дизлайк мероприятия",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id);\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        await api.addDislike(user.id, event.id);\r",
              "        pm.collectionVariables.set(\"eid\", event.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409 и error в формате json\", function () {\r",
              "    pm.response.to.have.status(409);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "dislike"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id текущего мероприятия"
            }
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- один и тот же пользователь не может лайкнуть один и тоже event"
      },
      "response": []
    },
    {
      "name": "удаление лайка или дизлайка",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id);\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        const like = await api.addLike(user.id, event.id);\r",
              "        const findLike = await api.findAction(user.id, event.id); \r",
              "        pm.collectionVariables.set(\"eid\", event.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204 и error в формате json\", function () {\r",
              "    pm.response.to.have.status(204);  \r",
              "});\r"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/delete",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "delete"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id текущего мероприятия"
            }
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- один и тот же пользователь не может лайкнуть один и тоже event"
      },
      "response": []
    },
    {
      "name": "ошибка удаления лайка или дизлайка",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id);\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        pm.collectionVariables.set(\"eid\", event.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и error в формате json\", function () {\r",
              "    pm.response.to.have.status(404);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/delete",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "delete"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id текущего мероприятия"
            }
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- один и тот же пользователь не может лайкнуть один и тоже event"
      },
      "response": []
    },
    {
      "name": "получения списка userAction",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const user1 = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        await api.addLike(user.id, event.id);\r",
              "        await api.addLike(user1.id, event.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и error в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const target = pm.response.json();\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "     pm.expect(target.length).to.be.above(2);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/admin/likes/users/:userId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "likes"
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- один и тот же пользователь не может лайкнуть один и тоже event"
      },
      "response": []
    },
    {
      "name": "ошибка получения userAction",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id);\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        pm.collectionVariables.set(\"eid\", event.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и error в формате json\", function () {\r",
              "    pm.response.to.have.status(404);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/admin/likes/users/:userId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "likes",
            "users",
            ":userId"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "event id"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id текущего мероприятия"
            }
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- один и тот же пользователь не может лайкнуть один и тоже event"
      },
      "response": []
    },
    {
      "name": "получения userAction",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id);\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        await api.addLike(user.id, event.id);\r",
              "        pm.collectionVariables.set(\"eid\", event.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и error в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const target = pm.response.json();\r",
              "var query = {};\r",
              "pm.request.url.query.all().forEach((param) => { query[param.key] = param.value });\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: user, event, actionType\", function () {\r",
              "pm.expect(target).to.have.property('user');\r",
              "pm.expect(target).to.have.property('event');\r",
              "pm.expect(target).to.have.property('actionType');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.user.toString()).equals(pm.variables.get('uid').toString());\r",
              "    pm.expect(target.event.toString()).equals(query['eventId'].toString());\r",
              "    pm.expect(target.actionType).equals('LIKE', 'активность должна быть лайком');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/admin/likes/users/:userId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "likes",
            "users",
            ":userId"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "event id"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id текущего мероприятия"
            }
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- один и тот же пользователь не может лайкнуть один и тоже event"
      },
      "response": []
    },
    {
      "name": "Поиск событий с рейтингом",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const user1 = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        await api.addLike(user.id, event.id);\r",
              "        await api.addLike(user1.id, event.id);\r",
              "        pm.collectionVariables.set('response', event);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = pm.collectionVariables.get('response');\r",
              "const target = pm.response.json()[0];\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('title');\r",
              "pm.expect(target).to.have.property('annotation');\r",
              "pm.expect(target).to.have.property('category');\r",
              "pm.expect(target).to.have.property('paid');\r",
              "pm.expect(target).to.have.property('eventDate');\r",
              "pm.expect(target).to.have.property('views');\r",
              "pm.expect(target).to.have.property('confirmedRequests');\r",
              "pm.expect(target).to.have.property('description');\r",
              "pm.expect(target).to.have.property('rating');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
              "    pm.expect(source.category.id).equal(target.category.id, 'Идентификатор категории должен соответствовать искомой категории');\r",
              "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость посещения события должна соответствовать искомому событию');\r",
              "    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать дате искомого события');\r",
              "    pm.expect(source.description).equal(target.description, 'Описание события должно соответствовать искомому событию');\r",
              "    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
              "    pm.expect(source.rating).equal(1, 'рейтинг к событию');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/events?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000&sort=RATING",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events"
          ],
          "query": [
            {
              "key": "rangeStart",
              "value": "2022-01-06%2013%3A30%3A38",
              "description": "дата и время не раньше которых должно произойти событие"
            },
            {
              "key": "rangeEnd",
              "value": "2097-09-06%2013%3A30%3A38",
              "description": "дата и время не позже которых должно произойти событие"
            },
            {
              "key": "from",
              "value": "0",
              "description": "количество событий, которые нужно пропустить для формирования текущего набора"
            },
            {
              "key": "size",
              "value": "2",
              "description": "количество событий в наборе"
            },
            {
              "key": "sort",
              "value": "RATING",
              "description": "сортировка"
            }
          ]
        },
        "description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addLike(userId, eventId, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/like\", null, \"Ошибка при добавлении лайка: \", verbose);",
          "    }",
          "",
          "    async addDislike(userId, eventId, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/dislike\", null, \"Ошибка при добавлении дизлайка: \", verbose);",
          "    }",
          "",
          "    async findAction(userId, eventId, verbose=null) {",
          "        return this.get('/admin/likes/users/' + userId +'/?eventId=' + eventId, null, \"Ошибка при поиске Action\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    }
  ]
}